#!/usr/bin/env python3
"""
–û–Ω–ª–∞–π–Ω —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º Gemini API.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
1. –û–±—Ä–∞–±–æ—Ç–∫—É PDF —Ñ–∞–π–ª–æ–≤
2. –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
3. –ê–≥—Ä–µ–≥–∞—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
"""

import asyncio
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

from auto_checker import run_auto_checker_async


async def main():
    print("=" * 80)
    print("üß™ –û–ù–õ–ê–ô–ù –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ + PDF")
    print("=" * 80)
    print()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π
    root_dir = "/Users/maksim/git_projects/sfedu_check_02/test_run/–ò–ò_–≤_–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏_–∏_–Ω–∞—É–∫–µ_–ó–∞–¥–∞–Ω–∏–µ_‚Ññ2_–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ_–ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è_—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π (3)"
    template_path = "/Users/maksim/git_projects/sfedu_check_02/–®–∞–±–ª–æ–Ω.docx"

    print(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {root_dir}")
    print(f"üìÑ –®–∞–±–ª–æ–Ω: {template_path}")
    print()
    print("üîç –ö–ª—é—á–µ–≤—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏:")
    print("  ‚Ä¢ –î–µ–Ω–∏—Å–µ–Ω–∫–æ –ú–∞–∫—Å–∏–º - 2 DOCX —Ñ–∞–π–ª–∞ (—Ç–µ—Å—Ç –∞–≥—Ä–µ–≥–∞—Ü–∏–∏)")
    print("  ‚Ä¢ –ë—É–∏ –ê –ë–æ—è –ë–µ—Ä—Ç—Ä–∞–Ω - 2 PDF —Ñ–∞–π–ª–∞ (—Ç–µ—Å—Ç PDF + –∞–≥—Ä–µ–≥–∞—Ü–∏—è)")
    print("  ‚Ä¢ –ë–æ–∂–µ–Ω—é–∫ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä - 1 PDF (—Ç–µ—Å—Ç PDF)")
    print("  ‚Ä¢ –î–æ–Ω—Å–∫–∞—è –ú–∞—Ä–∏–Ω–∞ - onlinetext.html (—Ç–µ—Å—Ç HTML)")
    print()
    print("‚öôÔ∏è  AI-–ø—Ä–æ–≤–µ—Ä–∫–∞: –í–ö–õ–Æ–ß–ï–ù–ê")
    print("üåê –ü—Ä–æ–∫—Å–∏: SOCKS5 –Ω–∞—Å—Ç—Ä–æ–µ–Ω —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    print("üîë API Keys: –†–æ—Ç–∞—Ü–∏—è 12 –∫–ª—é—á–µ–π Gemini")
    print()
    print("‚è±Ô∏è  –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: ~15-25 –º–∏–Ω—É—Ç –¥–ª—è –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
    print()
    input("‚ñ∂Ô∏è  –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏...")
    print()

    try:
        df, summary_path = await run_auto_checker_async(
            root_dir=root_dir,
            template_path=template_path,
            room_prompt="",
            ai_check_enabled=True,  # –í–∫–ª—é—á–∞–µ–º AI-–ø—Ä–æ–≤–µ—Ä–∫—É
        )

        if df is not None and summary_path is not None:
            print()
            print("=" * 80)
            print("‚úÖ –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
            print("=" * 80)
            print()
            print(f"üìä –ò—Ç–æ–≥–æ–≤–∞—è –≤–µ–¥–æ–º–æ—Å—Ç—å: {summary_path}")
            print(f"üìà –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: {len(df)}")
            print()
            print("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
            print(df[['–°—Ç—É–¥–µ–Ω—Ç', '–†–µ–∑—É–ª—å—Ç–∞—Ç', 'AI-–¥–µ—Ç–µ–∫—Ü–∏—è']].to_string(index=False))
            print()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª—É—á–∞–∏
            print("=" * 80)
            print("üéØ –ü–†–û–í–ï–†–ö–ê –ö–õ–Æ–ß–ï–í–´–• –°–õ–£–ß–ê–ï–í")
            print("=" * 80)
            print()

            # 1. –î–µ–Ω–∏—Å–µ–Ω–∫–æ - –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ DOCX
            denisenko = df[df['–°—Ç—É–¥–µ–Ω—Ç'].str.contains('–î–µ–Ω–∏—Å–µ–Ω–∫–æ', na=False)]
            if not denisenko.empty:
                print("‚úÖ –î–µ–Ω–∏—Å–µ–Ω–∫–æ –ú–∞–∫—Å–∏–º (2 DOCX - –∞–≥—Ä–µ–≥–∞—Ü–∏—è):")
                print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {denisenko.iloc[0]['–†–µ–∑—É–ª—å—Ç–∞—Ç']}")
                results_dir = Path(root_dir) / "–î–µ–Ω–∏—Å–µ–Ω–∫–æ –ú–∞–∫—Å–∏–º –ï–≤–≥–µ–Ω—å–µ–≤–∏—á_76330_assignsubmission_file" / "results"
                if results_dir.exists():
                    json_files = list(results_dir.glob("*.json"))
                    print(f"   –§–∞–π–ª–æ–≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {len(json_files)}")
                    for jf in json_files:
                        print(f"     - {jf.name}")
                print()

            # 2. –ë—É–∏ - –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ PDF
            bui = df[df['–°—Ç—É–¥–µ–Ω—Ç'].str.contains('–ë—É–∏', na=False)]
            if not bui.empty:
                print("‚úÖ –ë—É–∏ –ê –ë–æ—è (2 PDF - –∞–≥—Ä–µ–≥–∞—Ü–∏—è + PDF):")
                print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {bui.iloc[0]['–†–µ–∑—É–ª—å—Ç–∞—Ç']}")
                results_dir = Path(root_dir) / "–ë—É–∏ –ê –ë–æ—è –ë–µ—Ä—Ç—Ä–∞–Ω –§—Ä–µ–¥–µ—Ä–∏–∫_22660_assignsubmission_file" / "results"
                if results_dir.exists():
                    json_files = list(results_dir.glob("*.json"))
                    print(f"   –§–∞–π–ª–æ–≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {len(json_files)}")
                    for jf in json_files:
                        print(f"     - {jf.name}")
                print()

            # 3. –ë–æ–∂–µ–Ω—é–∫ - –æ–¥–∏–Ω–æ—á–Ω—ã–π PDF
            bozh = df[df['–°—Ç—É–¥–µ–Ω—Ç'].str.contains('–ë–æ–∂–µ–Ω—é–∫', na=False)]
            if not bozh.empty:
                print("‚úÖ –ë–æ–∂–µ–Ω—é–∫ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä (1 PDF):")
                print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {bozh.iloc[0]['–†–µ–∑—É–ª—å—Ç–∞—Ç']}")
                print()

            # 4. –î–æ–Ω—Å–∫–∞—è - HTML
            don = df[df['–°—Ç—É–¥–µ–Ω—Ç'].str.contains('–î–æ–Ω—Å–∫–∞—è', na=False)]
            if not don.empty:
                print("‚úÖ –î–æ–Ω—Å–∫–∞—è –ú–∞—Ä–∏–Ω–∞ (HTML):")
                print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {don.iloc[0]['–†–µ–∑—É–ª—å—Ç–∞—Ç']}")
                print()

            print("=" * 80)
            print("üéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
            print("=" * 80)

        else:
            print()
            print("‚ùå –û–®–ò–ë–ö–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –±–µ–∑ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ–¥–æ–º–æ—Å—Ç–∏")

    except Exception as e:
        print()
        print(f"‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())
